/*
 * Ring leader election algorithm from "Software Abstractions: Logic, 
 * Language, and Analysis" by Daniel Jackson.
 *
 * model author: Daniel Jackson
 * modified: Nuno Macedo
 */
module ring

open util/ordering[Id] 

sig Id {}

sig Process {
	succ: Process,
	id : Id,
	var toSend: set Id
} 

var sig Elected in Process {}

fact ring {
	id in Process lone -> Id
	all p: Process | Process in p.^succ
}

fact defineElected {
	no Elected
	always { Elected' = {p: Process | (after { p.id in p.toSend }) and p.id not in p.toSend} }
}

pred init  {
	all p: Process | p.toSend = p.id
}

pred nop[p: Process] {
	p.toSend' = p.toSend
}

pred comm[p: Process] {
	some i: p.toSend {
		p.toSend' = p.toSend - i
		p.succ.toSend' = p.succ.toSend + (i - prevs[p.succ.id])
	}
}

fact trace {
	init
	always { all p: Process | comm[p] or comm[p.~succ] or nop[p] }
}


pred Consistent { 
	eventually some Elected 
}
run Consistent for 2 but 10 Time 

assert GoodSafety { 
	always (always lone Elected)
}

pred Progress  {
	always (some toSend => some p: Process | comm[p])
}

assert BadLiveness {
	some Process => eventually { some Elected } 
}

assert GoodLiveness { 
	(some Process and Progress) => eventually (some Elected)
}

// Ring (1) scenario
check BadLiveness for 3 but 10 Time
// Ring (2) scenario
check GoodLiveness for 3 but 10 Time
// Ring (3) scenario
check GoodSafety for 3 but 10 Time