module span_tree

/*
 * Direct specification of a distributed spanning tree algorithm
 * over arbitrary network topologies.
 * This is a dynamic version of the model packaged with the Alloy
 * Analyzer.
 */

open util/ordering[Lvl]
open util/graph[Process]

sig Process {
  adj : set Process,
  var lvl: lone Lvl,
  var parent: lone Process
}

one sig Root in Process {}

sig Lvl {}

fact processGraph {
  noSelfLoops[adj]
  undirected[adj]
  Process in Root.*adj
}

pred Init {
  no lvl
  no parent
}

pred Nop {
  lvl = lvl'
  parent = parent'
}

pred MayAct[p : Process] {
  no p.lvl
  (p = Root || some p.adj.lvl)
}

pred Act[p : Process] {
  no p.lvl
  (p = Root) => {
    p.lvl' = first
    no p.parent'
  } else {
    some adjProc: p.adj {
        some adjProc.lvl
        p.lvl' = (adjProc.lvl).(next)
        p.parent' = adjProc
  }
}
  all p1 : Process-p | p1.lvl = p1.lvl' and p1.parent = p1.parent'
}

fact Trace {
  Init
  always { (some p : Process | Act[p]) || Nop }
}

pred Fairness {
  always { (some p : Process | MayAct[p]) =>
		(eventually { some p : Process | Act[p] } ) }
}

pred IsSpanTree {
  Process in Root.*~(parent)
  dag[~(parent)]
}

assert BadLiveness {
	eventually { IsSpanTree }
}

assert GoodLiveness {
	Fairness => eventually { IsSpanTree }
}

assert GoodSafety {
	always { no p : Process | p in p.^(parent) }
}

assert Closure {
	always IsSpanTree => parent = parent'
}

pred consistent {}

run consistent for 3 but 10 Time expect 1
check BadLiveness for 3 but 10 Time expect 1
check GoodSafety for 3 but 10 Time expect 0
check GoodLiveness for 3 but 10 Time expect 0

run consistent for 4 but 10 Time expect 1
check BadLiveness for 4 but 10 Time expect 1
check GoodSafety for 4 but 10 Time expect 0
check GoodLiveness for 4 but 10 Time expect 0

run consistent for 5 but 10 Time expect 1
check BadLiveness for 5 but 10 Time expect 1
check GoodSafety for 5 but 10 Time expect 0
check GoodLiveness for 5 but 10 Time expect 0

run consistent for 6 but 10 Time expect 1
check BadLiveness for 6 but 10 Time expect 1
check GoodSafety for 6 but 10 Time expect 0
check GoodLiveness for 6 but 10 Time expect 0

run consistent for 7 but 10 Time expect 1
check BadLiveness for 7 but 10 Time expect 1
check GoodSafety for 7 but 10 Time expect 0
check GoodLiveness for 7 but 10 Time expect 0

run consistent for 8 but 10 Time expect 1
check BadLiveness for 8 but 10 Time expect 1
check GoodSafety for 8 but 10 Time expect 0
check GoodLiveness for 8 but 10 Time expect 0

