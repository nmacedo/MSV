module examples/systems/javatypes

/*
 * Model of the Java type system. The TypeSoundness assertion
 * claims that if a Java program type checks successfully,
 * then a field will cannot be assigned an incorrect type.
 * This is a dynamic version of the model packaged with the Alloy
 * Analyzer.
 *
 * author: Electrum team, 05/2018
 */

open util/graph[Type] as graph

abstract sig Type {
  xtends: set Type
  }
sig Interface extends Type {}
  { xtends in Interface }
sig Class extends Type {
  implements: set Interface,
  fields: set Field
  } { lone xtends && xtends in Class }
-- optional: best omitted to allow private etc
-- {xtends.@fields in fields}
sig Field {
  declType: Type
  }

fact {
  graph/dag[xtends]
  }

abstract sig Value {}
one sig Null extends Value {}
sig Object extends Value {
  type: Class,
  slot: Field lone -> lone Slot,
  var reaches: set Object
  } {slot.Slot = type.fields}
var sig objects in Object {}
sig Slot {
	var holds : lone Value
}


abstract sig Statement {}
sig Assignment extends Statement {
  va: Variable,
  expr: Expr
  }
sig Setter extends Statement {
  field: Field,
  lexpr, rexpr: Expr
  }

abstract sig Expr {
  type: Type,
  subexprs: set Expr,
  var val: lone Value
  } {subexprs = this + this.^@expr}
sig Variable extends Expr {
  declType: Type,
  var holds : lone Value
  } {type = declType}
var sig vars in Variable {}

sig Constructor extends Expr {
  class: Class
  }
sig Getter extends Expr {
  field: Field,
  expr: Expr
  } {type = field.declType}

fact {
  always {
    (this/Slot <: holds+this/Variable <: holds) in (Slot + Variable) -> lone Value
    all o: Object | o.reaches = holds[o.slot[Field]] & Object
    holds.Value & Variable = vars
    objects = holds[vars].^reaches
    all e: Expr | let v = val[e] {
      e in Variable => v = holds[e]
      e in Getter => v = holds[(val[e.expr]).slot[e.field]]
      e in Constructor => v in Object and v.type = e.type }
    }
}
pred RuntimeTypesOK {
  all o: objects, f: o.type.fields |
    let v = holds [o.slot [f]] | HasType [v, f.declType]
  all va: vars |
    let v = holds [va] | HasType [v, va.declType]
  }

pred HasType [v: Value, t: Type] {
  v in Null or Subtype [v.type, t]
  }

pred Subtype [t, t1: Type] {
  t in Class =>
     (let supers = (t & Class).*(Class<:xtends) |
        t1 in (supers + supers.implements.*(Interface<:xtends)))
  t in Interface => t1 in (t & Interface).*(Interface<:xtends)
  }

pred TypeChecksSetter [stmt: Setter] {
  all g: Getter & stmt.(lexpr+rexpr).subexprs | g.field in g.expr.type.fields
  stmt.field in stmt.lexpr.type.fields
  Subtype [stmt.rexpr.type, stmt.field.declType]
  }

pred ExecuteSetter [stmt: Setter] {
  stmt.(rexpr+lexpr).subexprs & Variable in vars
  objects' = objects and vars' = vars
  let rval = val [stmt.rexpr], lval = val [stmt.lexpr] {
    no lval & Null
    (this/Slot <: holds+this/Variable <: holds)' = (this/Slot <: holds+this/Variable <: holds) ++ (lval.slot[stmt.field] -> rval)
   }
  }

assert TypeSoundness {
  all stmt: Setter | always (
    {RuntimeTypesOK
    ExecuteSetter [stmt]
    TypeChecksSetter [stmt]
    } => after RuntimeTypesOK)
  }

fact {all o, o1: Object | some o.slot[Field] & o1.slot[Field] => o = o1}
fact {all g: Getter | no g & g.^subexprs}

fact ScopeFact {
  lte[#Assignment,1]
  lte[#Class, 5]
  lte[#Interface, 5]
}

run ExecuteSetter for 3 but 10 Time expect 1
check TypeSoundness for 3 but 1 Statement, 3 Field, 3 Slot, 10 Time expect 0

run ExecuteSetter for 4 but 10 Time expect 1
check TypeSoundness for 4 but 1 Statement, 3 Field, 3 Slot, 10 Time expect 0

run ExecuteSetter for 5 but 10 Time expect 1
check TypeSoundness for 5 but 1 Statement, 3 Field, 3 Slot, 10 Time expect 0

run ExecuteSetter for 6 but 10 Time expect 1
check TypeSoundness for 6 but 1 Statement, 3 Field, 3 Slot, 10 Time expect 0
